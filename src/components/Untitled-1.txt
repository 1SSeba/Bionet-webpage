#include <TinyGPSPlus.h>
#include <SoftwareSerial.h>
#include <ESP8266WiFi.h> // Para ESP8266, usa <WiFi.h> para ESP32

// Configuración de red WiFi
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";

// URL y claves de la API de Supabase
const char* host = "https://lwonwqsqcjmfuoizjsyt.supabase.co";
const int port = 443;
const char* apiKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx3b253cXNxY2ptZnVvaXpqc3l0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjQyMDk0NzgsImV4cCI6MjAzOTc4NTQ3OH0.1oMvwo5XtrZwYkf14ity66OqqdGRgzYTCvOAx4K5jSI";
const char* apiUrl = "/rest/v1/gps_data";

// Configuración del GPS
static const int RXPin = 4, TXPin = 3;
static const uint32_t GPSBaud = 9600;

// El objeto TinyGPSPlus
TinyGPSPlus gps;

// La conexión serial con el GPS
SoftwareSerial ss(RXPin, TXPin);

// Variables de tiempo
unsigned long lastDisplayTime = 0;
const unsigned long displayInterval = 1000; // 1 segundo

void setup() {
  Serial.begin(115200);
  ss.begin(GPSBaud);
  
  // Conectar a WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");

  Serial.println(F("DeviceExample.ino"));
  Serial.println(F("A simple demonstration of TinyGPSPlus with an attached GPS module"));
  Serial.print(F("Testing TinyGPSPlus library v. "));
  Serial.println(TinyGPSPlus::libraryVersion());
  Serial.println(F("by Mikal Hart"));
  Serial.println();
}

void loop() {
  // Leer desde el módulo GPS y codificar los datos
  while (ss.available() > 0) {
    gps.encode(ss.read());
  }

  // Mostrar información una vez por segundo
  if (millis() - lastDisplayTime > displayInterval) {
    lastDisplayTime = millis();
    displayInfo();
    sendGPSData(); // Enviar datos a Supabase
  }

  // Verificar si el módulo GPS está conectado
  if (millis() > 5000 && gps.charsProcessed() < 10) {
    Serial.println(F("No GPS detected: check wiring."));
    while (true);
  }
}

void displayInfo() {
  Serial.println(F("=============================="));
  Serial.print(F("Location: "));
  if (gps.location.isValid()) {
    Serial.print(F("Lat: "));
    Serial.print(gps.location.lat(), 6);
    Serial.print(F(", Lon: "));
    Serial.print(gps.location.lng(), 6);
  } else {
    Serial.print(F("INVALID"));
  }

  Serial.println();
  Serial.print(F("Date/Time: "));
  if (gps.date.isValid()) {
    Serial.print(gps.date.month());
    Serial.print(F("/"));
    Serial.print(gps.date.day());
    Serial.print(F("/"));
    Serial.print(gps.date.year());
  } else {
    Serial.print(F("INVALID"));
  }

  Serial.print(F(" "));
  if (gps.time.isValid()) {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(F(":"));
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(F(":"));
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.print(gps.time.second());
  } else {
    Serial.print(F("INVALID"));
  }

  Serial.println();
  Serial.println(F("=============================="));
  Serial.println();
}

void sendGPSData() {
  WiFiClient client;
  if (!client.connect(host, port)) {
    Serial.println("Connection failed");
    return;
  }

  // Crear el JSON con los datos GPS
  String payload = "{\"lat\":\"" + String(gps.location.lat(), 6) +
                    "\",\"lon\":\"" + String(gps.location.lng(), 6) +
                    "\",\"timestamp\":\"now()\"}";

  // Preparar la solicitud POST
  client.print(String("POST ") + apiUrl + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Content-Type: application/json\r\n" +
               "apikey: " + apiKey + "\r\n" +
               "Authorization: Bearer " + apiKey + "\r\n" +
               "Content-Length: " + payload.length() + "\r\n" +
               "Connection: close\r\n\r\n" +
               payload + "\r\n");

  // Leer la respuesta del servidor
  while (client.connected() || client.available()) {
    String line = client.readStringUntil('\r');
    Serial.print(line);
  }

  client.stop();
}
